#include <vector>
#include <map>
#include <regex>
#include <string>

typedef unsigned char byte;
typedef unsigned int counter;
typedef int stack_location;

struct InvokePlaceholder;
struct FunctionSource;
struct VariableData;
struct FunctionData;
void compile_token(std::vector<byte> &compiled, std::map<std::string, FunctionData> &functions, std::map<std::string, VariableData> &variables, unsigned int &stack_location, std::vector<InvokePlaceholder> &invokes, std::string &token);
void compile_lambda(std::vector<byte> &compiled, std::map<std::string, FunctionData> &functions, std::vector<InvokePlaceholder> &invokes, std::string &l_source);
void compile_string(std::vector<byte> &compiled, std::string &s);
void compile_function(std::vector<byte> &compiled, std::map<std::string, FunctionData> functions, std::vector<InvokePlaceholder> &invokes, FunctionSource &f_source);
void compile_let(std::vector<byte> &compiled, std::map<std::string, FunctionData> &functions, std::vector<InvokePlaceholder> &invokes, std::map<std::string, VariableData> &variables, stack_location stack_loc, std::string &var_name, std::string &l_source);
void compile_source(std::vector<byte> &compiled, std::map<std::string, FunctionData> &functions, std::vector<InvokePlaceholder> &invokes, std::string &source, std::map<std::string, VariableData> &variables = std::map<std::string, VariableData>(), stack_location stack_loc = 0);
