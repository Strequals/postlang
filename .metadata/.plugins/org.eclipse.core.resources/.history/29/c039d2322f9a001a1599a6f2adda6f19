//============================================================================
// Name        : postlang_c_0_1.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <fstream>
#include <vector>
#include <map>
#include <regex>
#include <string>
#include <iostream>
#include <compile.h>

typedef unsigned char byte;
typedef unsigned int counter;
typedef int stack_location;
typedef std::map<std::string, FunctionData> function_map;
typedef std::map<std::string, VariableData> variable_map;

static const byte PUSH = 0;
static const byte PUSH_N = 1;
static const byte POP = 2;
static const byte POP_N = 3;
static const byte DUP = 4;
static const byte DUP_N = 5;
static const byte DUP_X = 6;
static const byte DUP_X_N = 7;
static const byte BRANCH = 8;
static const byte BRANCHIF = 9;
static const byte INVOKE = 10;
static const byte RETURN = 11;
static const byte MAP = 12;
static const byte MAP_N = 13;
static const byte INVOKE_INTERNAL = 255;


static const byte STDIO_ID = 0;
static std::map<std::string, byte> LIB_MAP = {
		{"stdio", STDIO_ID}
};
static const byte CIN_ID = 0;
static const byte COUT_ID = 1;
static const byte CERR_ID = 2;
static std::map<std::string, byte> STDIO_MAP = {
		{"cin", CIN_ID},
		{"cout", COUT_ID},
		{"cerr", CERR_ID}
};

static std::map<std::string, byte> BYTECODE_MAP = {
		{"map", MAP}
};

struct FunctionSource {
	std::string name;
	std::string params;
	std::string body;
};

struct InvokePlaceholder {
	std::string function_name;
	counter location;
};

struct VariableData {
	stack_location loc;
	byte len;
};

struct FunctionData {
	counter loc;
	byte param_len;
	byte return_len;
};

enum CompileState {
	TOKEN, STRING, LAMBDA
};

/**
 * Removes whitespace from the beginning and end of s
 */
void trim(std::string &s) {
	unsigned int i = 0;
	for (i = 0; i < s.length(); i++) {
		if (!std::isspace(s[i])) {
			break;
		}
	}
	unsigned int j = s.length();
	for (j = s.length()-1; j > i; j--) {
		if (!std::isspace(s[j])) {
			break;
		}
	}
	s.erase(j+1);
	s.erase(0,i);
}

/**
 * Returns a trimmed copy of s
 */
std::string trim_copy(std::string &s) {
	unsigned int i = 0;
	for (i = 0; i < s.length(); i++) {
		if (!std::isspace(s[i])) {
			break;
		}
	}
	unsigned int j = s.length();
	for (j = s.length()-1; j > i; j--) {
		if (!std::isspace(s[j])) {
			break;
		}
	}
	return s.substr(i,j-i+1);
}

void handle_error(std::string &message) {
	//TODO: handle errors
}

byte map_v(std::map<std::string, byte> &m, std::string &key) {
	std::map<std::string, byte>::iterator iter = m.find(key);
	if (iter != m.end()) {
		return iter -> second;
	} else {
		std::string err_message = key + " not recognized.";
		handle_error(err_message);
		return 0;
	}
}

/**
 * like map_v, but instead of handling errors itself, returns a flag that is true if mapping is successful
 */
std::pair<byte,bool> map_v_safe(std::map<std::string, byte> &m, std::string &key) {
	std::map<std::string, byte>::iterator iter = m.find(key);
	std::pair<byte,bool> x;
	if (iter != m.end()) {
		x.first = iter -> second;
		x.second = true;
		return x;
	} else {
		x.first = 0;
		x.second = false;
		return x;
	}
}

static const std::regex INT_TYPE_G("[-|+]?[0-9]+");
static const std::regex INT_TYPE("i[-|+]?[0-9]+");
static const std::regex LONG_TYPE("l[-|+]?[0-9]+");
static const std::regex FLOAT_TYPE_G("[-|+]?[0-9]+[.]?[0-9]+");
static const std::regex FLOAT_TYPE("f[-|+]?[0-9]+[.]?[0-9]+");

static const std::regex EXTERNAL_CALL("[a-z0-9]+[.][a-z0-9]+");
static const std::regex MAP_N_CALL("[map^][0-9]+");
static const std::regex MAP_T_CALL("[map^][a-z]+");
/**
 * Compiles the token into compiled and returns the change in stack height as a result of executing the token
 */
void compile_token(std::vector<byte> &compiled, function_map &functions, std::vector<InvokePlaceholder> &invokes, variable_map &variables, stack_location &stack_loc, std::string &token) {
	if (std::regex_match(token, INT_TYPE_G)) {
		std::cout << "int token: " << token << std::endl;
		errno = 0;
		long int_value = std::stol(token);
		if (errno == ERANGE) {
			std::string s = "token " + token + " out of int range";
			handle_error(s);
		}
		compiled.push_back(PUSH_N);
		compiled.push_back(4);
		compiled.push_back((int_value >> 24) & 0xFF);
		compiled.push_back((int_value >> 16) & 0xFF);
		compiled.push_back((int_value >> 8) & 0xFF);
		compiled.push_back((int_value) & 0xFF);
	} else if (std::regex_match(token, INT_TYPE)) {
		std::cout << "int token: " << token << std::endl;
		errno = 0;
		long int_value = std::stol(token.substr(1));
		if (errno == ERANGE) {
			std::string s = "token " + token + " out of int range";
			handle_error(s);
		}
		compiled.push_back(PUSH_N);
		compiled.push_back(4);
		compiled.push_back((int_value >> 24) & 0xFF);
		compiled.push_back((int_value >> 16) & 0xFF);
		compiled.push_back((int_value >> 8) & 0xFF);
		compiled.push_back((int_value) & 0xFF);
	} else if (std::regex_match(token, LONG_TYPE)) {
		std::cout << "long token: " << token << std::endl;
		errno = 0;
		long long int long_value = std::stoll(token.substr(1));
		if (errno == ERANGE) {
			std::string s = "token " + token + " out of long range";
			handle_error(s);
		}
		compiled.push_back(PUSH_N);
		compiled.push_back(8);
		compiled.push_back((long_value >> 56) & 0xFF);
		compiled.push_back((long_value >> 48) & 0xFF);
		compiled.push_back((long_value >> 40) & 0xFF);
		compiled.push_back((long_value >> 32) & 0xFF);
		compiled.push_back((long_value >> 24) & 0xFF);
		compiled.push_back((long_value >> 16) & 0xFF);
		compiled.push_back((long_value >> 8) & 0xFF);
		compiled.push_back((long_value) & 0xFF);
	} else if (std::regex_match(token, FLOAT_TYPE) || std::regex_match(token, FLOAT_TYPE_G)) {
		std::cout << "float token: " << token << std::endl;
		std::stof(token);
	} else if (std::regex_match(token, EXTERNAL_CALL)) {
		std::cout << "call token: " << token << std::endl;

		unsigned int x = token.find('.');
		std::string lib_name = token.substr(0,x);
		std::string f_name = token.substr(x+1);

		compiled.push_back(255);
		byte lib_id = map_v(LIB_MAP, lib_name);
		compiled.push_back(lib_id);
		switch (lib_id) {
		case STDIO_ID:
			compiled.push_back(map_v(STDIO_MAP, f_name));
			break;
		}
	} else {
		std::cout << "misc token: " << token << std::endl;
		std::pair<byte, bool> bc_map = map_v_safe(BYTECODE_MAP, token);
		if (bc_map.second) {
			compiled.push_back(bc_map.first);
			switch (bc_map.first) {
			//handle extra bytes here
			}
		} else {
			//handle special forms
			if (std::regex_match(token, MAP_N_CALL)) {

			} else if (std::regex_match(token, MAP_T_CALL)) {

			}
		}
	}
}

void compile_lambda(std::vector<byte> &compiled, function_map &functions, std::vector<InvokePlaceholder> &invokes, std::string &l_source) {
	compiled.push_back(PUSH_N);
	compiled.push_back(4);

	unsigned int lambda_location = compiled.size() + 9;

	compiled.push_back((lambda_location >> 24) & 0xFF);
	compiled.push_back((lambda_location >> 16) & 0xFF);
	compiled.push_back((lambda_location >> 8) & 0xFF);
	compiled.push_back((lambda_location) & 0xFF);

	compiled.push_back(BRANCH);

	counter branch_location = compiled.size();
	compiled.push_back(0);
	compiled.push_back(0);
	compiled.push_back(0);
	compiled.push_back(0);

	l_source = l_source + "\n";
	variable_map variables;
	stack_location stack_loc = 0;
	compile_source(compiled, functions, invokes, variables, stack_loc, l_source);

	compiled.push_back(RETURN);
	compiled.push_back(0);
	compiled.push_back(0);

	unsigned int branch_destination = compiled.size();

	compiled[branch_location] = (branch_destination >> 24) & 0xFF;
	compiled[branch_location+1] = (branch_destination >> 16) & 0xFF;
	compiled[branch_location+2] = (branch_destination >> 8) & 0xFF;
	compiled[branch_location+3] = (branch_destination) & 0xFF;
}

void compile_string(std::vector<byte> &compiled, std::string &s) {
	if (s.length()==0) return;
	unsigned int i = 0;
	while (i < s.length()) {
		if (i % 255 == 0) {
			compiled.push_back(1);
			unsigned int x = s.length()-i;
			if (x > 255) x = 255;
			compiled.push_back((byte) x);
		}
		compiled.push_back((byte) s[i]);
		i++;
	}

}

void compile_function(std::vector<byte> &compiled, function_map functions, std::vector<InvokePlaceholder> &invokes, FunctionSource &f_source) {
	std::cout << "Compiling Function: " << std::endl;
	std::cout << "----------------------------------------" << std::endl;
	std::cout << f_source.name << std::endl;
	std::cout << f_source.params << std::endl;
	std::cout << f_source.body << std::endl;
	variable_map variables;

	std::cout << "----------------------------------------" << std::endl;
}

void compile_let(std::vector<byte> &compiled, function_map &functions, std::vector<InvokePlaceholder> &invokes, variable_map &variables, stack_location &stack_loc, std::string &var_name, std::string &l_source) {
	stack_location sl_0 = stack_loc;
	std::cout << "Compiling let: name - " << var_name << ", code:" << l_source << std::endl;
	long diff = compile_source(compiled, functions, invokes, variables, stack_loc, l_source);
}

long compile_source(std::vector<byte> &compiled, function_map &functions, std::vector<InvokePlaceholder> &invokes, variable_map &variables, stack_location &stack_loc, std::string &source) {
	std::cout << "Compiling Source: " << std::endl;
	std::cout << "----------------------------------------" << std::endl;
	//std::stringstream source_stream(source);
	//std::string string_acc;
	//std::string token;
	/*while (std::getline(source_stream, token, ' ')) {
		trim(token);
		if (token.length()==0) continue;
		std::cout << "token:";
		std::cout << token << std::endl;

		if (token[0] == '\"') {

		}
	}*/

	CompileState state = TOKEN;
	unsigned int begin = 0;
	bool processToken;
	std::string token;
	char char_at;
	for (unsigned int i = 0; i < source.length(); i++) {
		char_at = source[i];
		//std::cout << char_at << std::endl;
		processToken = false;
		switch (state) {
		case TOKEN:
			if (char_at == '\"') {
				token = source.substr(begin, i-begin);
				begin = i+1;
				processToken = true;
				state = STRING;
			} else if (char_at == '_' && i==begin) {
				begin = i+1;
				state = LAMBDA;
			} else {
				if (std::isspace(char_at)) {
					token = source.substr(begin, i-begin);
					begin = i+1;
					processToken = true;
				}
			}
			break;
		case STRING:
			if (char_at == '\"') {
				token = source.substr(begin, i-begin);
				std::cout << "Compiling string: " << token << std::endl;
				begin=i+1;
				compile_string(compiled, token);
				state = TOKEN;
			} else {

			}
			break;
		case LAMBDA:
			if (char_at == '_') {
				token = source.substr(begin, i-begin);
				std::cout << "Compiling lambda: " << token << std::endl;
				begin=i+1;
				compile_lambda(compiled, functions, invokes, token);
				state = TOKEN;
			} else {

			}
			break;
		}

		if (processToken) {
			if (token == "let") {
				int x = source.find('=',i);
				int end = source.find(';',x);
				std::string v_name = source.substr(i,x-i);
				std::string v_source = source.substr(x+1,end-x-1);
				compile_let(compiled, functions, invokes, variables, stack_loc, v_name, v_source);
				i=end+1;
				begin=end+1;
			}
			if (token.length() > 0) compile_token(compiled, functions, invokes, variables, stack_loc, token);
		}
	}
	std::cout << "----------------------------------------" << std::endl;

	return stack_loc;
}

void compile(std::vector<byte>	&compiled, std::string &source) {
	function_map functions;
	std::vector<FunctionSource> f_sources;

	unsigned int function_define_location;
	const int define_length = 7;
	int pass_location = 0;
	int removed_count = 0;
	std::string source_main(source);
	while ((function_define_location = source.find("define ", pass_location)) != std::string::npos) {
		if (function_define_location > 0) {
			char &prev_char = source[function_define_location-1];
			if (!std::isspace(prev_char)) {
				pass_location = function_define_location+7;
				continue;
			}
		}

		int open_param_location = source.find("(", function_define_location);
		int close_param_location = source.find(")", open_param_location);
		int open_source_location = source.find("{", close_param_location);
		int close_source_location = source.find("}", open_source_location);

		FunctionSource f_source;
		f_source.name = source.substr(function_define_location+define_length, open_param_location-function_define_location-define_length);
		trim(f_source.name);
		f_source.params = source.substr(open_param_location+1,close_param_location-open_param_location-1);
		f_source.body = source.substr(open_source_location+1,close_source_location-open_source_location-1);

		f_sources.push_back(f_source);

		functions[f_source.name];

		int n = close_source_location-function_define_location+1;
		source_main.erase(function_define_location-removed_count, n);
		removed_count += n;

		pass_location = close_source_location+1;
	}

	std::vector<InvokePlaceholder> invokes;
	const int header_size = 5;
	for (FunctionSource &f_source : f_sources) {
		counter location = compiled.size();
		compile_function(compiled, functions, invokes, f_source);
		functions[f_source.name].loc = location + header_size;
	}

	variable_map v_map;
	stack_location s_loc = 0;
	compile_source(compiled, functions, invokes, v_map, s_loc, source_main);

	//TODO: replace placeholders
}

void runTest() {
	std::ofstream out("test.post", std::ios::binary);

	//dup test
	//unsigned char x[]={1,8,3,1,4,1,5,9,2,6, 254, 7,0,0,0,7,8, 255, 6,0,0,0,7, 254};

	//branch test
	//unsigned char x[]={0,0, 9,0,0,0,15, 0,0,254, 8,0,0,0,18, 0,1,254};

	//invoke/return test
	//unsigned char x[]={8,0,0,0,18, 1,8,3,1,4,1,5,9,2,6, 11,8,1, 0,1,254, 10,0,0,0,5, 254};

	//byte-binaryops test
	//unsigned char x[]={1,2,100,0, 254, 12, 254, 2, 1,2,100,0, 254, 13, 254, 2, 1,2,100,0, 255, 14, 254, 2, 1,2,100,0, 254, 15, 254};

	//invoke_external test
	//unsigned char x[] = {1,2,'i','h',255,0,1,255,0,1};

	//map test
	unsigned char x[]={1,12,'H','e','l','l','o',' ','W','o','r','l','d','!', //0-13
			0,12, //14-15
			1,4,0,0,0,27, //16-21
			8,0,0,0,33, //22-26
			255,0,1,11,0,0, //27-32
			12 //33
	};
	out.write((char*)&x,sizeof(x));
	out.close();
}

int main(int argc, char *argv[]) {
	if (argc != 2) return 0;
	std::string source_file(argv[1]);
	std::ifstream in(source_file);
	std::string program_source;

	in.seekg(0, std::ios::end);
	program_source.reserve(in.tellg());
	in.seekg(0, std::ios::beg);

	program_source.assign((std::istreambuf_iterator<char>(in)),
			std::istreambuf_iterator<char>());

	std::vector<byte> compiled;
	program_source += "\n";
	compile(compiled, program_source);
	//std::cout << compiled[0] << std::endl;

	std::cout << "####################################" << std::endl;
	std::cout << "Compiled: " << std::endl;

	for (unsigned int i = 0; i < compiled.size(); i++) {
		std::cout << i << ": " << (int) compiled[i] << std::endl;
	}

	unsigned int k = source_file.find_last_of(".");
	std::string compiled_file = source_file.substr(0,k) + ".postc";
	std::ofstream out(compiled_file, std::ios::binary);
	out.write((char*)&compiled[0], compiled.size());
	out.close();
}
